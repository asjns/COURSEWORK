Having done three practice contests, a real ACM contest, and a multitude of additional practice problems, I have finally manifested some type of identity regarding what types of data structures and algorithms I feel confident in utilizing. By far, my best skill in these contests is thikikng of the solutions on paper; often I can find the right approach, but I fail at the implementation of my code.

What does this mean? Well, the first absolute area of improvement I require is implementing more foreign data structures like sets, lists, and queues. Having an absolute familiarity with these implementations would make a 30 minute coding effort be reduced to only a few minutes. It would also help me with the frequent mistake of never finding a simple data structure; there's no need to use unordered_maps taking nodes to a vector if a simple double array works fine. 

The second area of improvement I can identity is the need for me to simplify my approach towards attemping to solve each problem I go after. If I could at least solve the problem via pseudocode, I think I would be able to use my references online to implement the actual solution. For example, in the most recent practice I tried to solve a comfortable cow problem from the February USACO contest. This was difficult for me to solve because I could not find the right structure and technique to test how cows would end up comfortable. I recognized a basic solution involving us iterating through each cow placement and calculating the total_cows needed to be placed after each iteration, but I didn't end up implementing the code correctly. I recognized a "scan-and-fill" approach, but I couldnt think of the queue data structure for my solution. Therefore I took a recursive approach, and ended up getting stuck trying to think out the recursion. 

So, for my upcoming practice questions I would like to work on similar queue and sequential implementations, where we scan through inputs and solve the problem in close to linear time. These problems are expected to use arrays and queues, where we scan and then perform an operation in place after each scanned input. I think I've noticed many of these problems in each contest I've practiced with, so I think this general problem type would be great for me to focus on improving.